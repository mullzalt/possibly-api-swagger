openapi: 3.1.0
info:
  title: Posibly API
  version: 0.0.1
tags:
  - name: Authentication
    description: Authentication actions
  - name: Outlet Resource
    description: Manage company or shop resources information
  - name: Employee
    description: Manage employee users
  - name: User
    description: Manage users
  - name: Transaction
    description: Manage transactions of an outlet
paths:
  /admin/users:
    post:
      summary: Create new account for admin, admin protected
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        description: Credential and account information for new admin
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/SignIn'
                account:
                  $ref: '#/components/schemas/AdminAccount'
      responses:
        '200':
          description: Account successfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Account created
        '401':
          description: Not signed in
          $ref: '#/components/responses/Unauthorized'
        '403':
          description: Not admin
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unexpected'
  /auth/sign-up/personal:
    post:
      summary: Sign up for personal account user then sign in
      tags:
        - Authentication
      requestBody:
        description: Credential and account information for new personal account
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/SignIn'
                account:
                  $ref: '#/components/schemas/PersonalAccount'
      responses:
        '200':
          description: Account successfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Account created
                      data:
                        $ref: '#/components/schemas/BearerTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/Unexpected'
  /auth/sign-up/business:
    post:
      summary: Sign up for business account user then sign in
      tags:
        - Authentication
      requestBody:
        description: Credential and account information for new business account
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/SignIn'
                account:
                  $ref: '#/components/schemas/BusinessAccount'
      responses:
        '200':
          description: Account successfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Account created
                      data:
                        $ref: '#/components/schemas/BearerTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/Unexpected'
  /auth/sign-in:
    post:
      summary: Sign in authentication action
      tags:
        - Authentication
      requestBody:
        description: Credential used for sign in
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignIn'
      responses:
        '200':
          description: Successfull sign in
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Sign in successfull
                      data:
                        $ref: '#/components/schemas/BearerTokens'
        '403':
          description: Invalid sign in credential
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Invalid email or password
                      code:
                        default: 403
                      success:
                        default: false
        default:
          $ref: '#/components/responses/Unexpected'
  /auth/sign-out:
    post:
      summary: Sign out from existing session
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull sign out
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Sign out successfull
        '401':
          description: No current session
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: You are not signed in
                      code:
                        default: 401
                      success:
                        default: false
        default:
          $ref: '#/components/responses/Unexpected'
  /auth/refresh:
    get:
      summary: Revalidate access and refresh token
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull sign in
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BearerTokens'
        '403':
          description: Invalid or expired refresh Token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      message:
                        default: Invalid token
                      code:
                        default: 403
                      success:
                        default: false
        default:
          $ref: '#/components/responses/Unexpected'
  /auth/info:
    get:
      summary: Get current session user information
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid or expired access Token
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets:
    get:
      summary: Get all the outlets of current user
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Outlet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new Outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      requestBody:
        description: Outlet data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet'
      responses:
        '201':
          description: Outlet successfully created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Outlet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}:
    get:
      summary: Get outlet by Id
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Outlet'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Outlet data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Outlet'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Outlet'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/employees:
    get:
      summary: Get all employees of an outlet
      tags:
        - Employee
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          type: object
                          properties:
                            user:
                              $ref: '#/components/schemas/User'
                            profile:
                              $ref: '#/components/schemas/EmployeeAccount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new employee for an outlet
      tags:
        - Employee
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Credential and account information for new employee account
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/SignIn'
                account:
                  $ref: '#/components/schemas/EmployeeAccount'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          profile:
                            $ref: '#/components/schemas/EmployeeAccount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/employees/{employeeId}:
    get:
      summary: Get employee by Id
      tags:
        - Employee
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/employeeId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      profile:
                        $ref: '#/components/schemas/EmployeeAccount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing employee
      tags:
        - Employee
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/employeeId'
      requestBody:
        description: Employee data
        content:
          application/json:
            schema:
              type: object
              properties:
                type: object
                properties:
                  user:
                    $ref: ../schemas/User.yaml
                  profile:
                    $ref: ../schemas/EmployeeAccount.yaml
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: '#/components/schemas/User'
                          profile:
                            $ref: '#/components/schemas/EmployeeAccount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing employee
      tags:
        - Employee
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/categories:
    get:
      summary: Get all categories of an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new Category for an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Category data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/categories/{categoryId}:
    get:
      summary: Get Category by Id
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/categoryId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing Category
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        description: Category data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          type: object
                          required:
                            - name
                          properties:
                            id:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            name:
                              type: string
                              example: Food
                            parentCategoryId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                              nullable: true
                            outletId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            deletedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
                            createdAt:
                              type: string
                              readOnly: true
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            updatedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing Category
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/categoryId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add children to an existing Category
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/categoryId'
      requestBody:
        description: Category data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          type: object
                          required:
                            - name
                          properties:
                            id:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            name:
                              type: string
                              example: Food
                            parentCategoryId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                              nullable: true
                            outletId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            deletedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
                            createdAt:
                              type: string
                              readOnly: true
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            updatedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/products:
    get:
      summary: Get all products of an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new product for an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Product Data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/products/{productId}:
    get:
      summary: Get product by Id
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Product'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing product
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/productId'
      requestBody:
        description: product data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          type: object
                          required:
                            - name
                            - price
                            - isAvailable
                          properties:
                            id:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            name:
                              type: string
                              example: Some Food
                            price:
                              type: number
                              multipleOf: 0.01
                              example: 10.25
                            isAvailable:
                              type: boolean
                              default: true
                            categoryId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            image:
                              type: string
                              example: http://somelink.com/path/filename.png
                            outletId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            deletedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
                            createdAt:
                              type: string
                              readOnly: true
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            updatedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing product
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/productId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/taxes:
    get:
      summary: Get all taxes of an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Tax'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new Tax for an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Tax data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tax'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tax'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/taxes/{taxId}:
    get:
      summary: Get Tax by Id
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/taxId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tax'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing Tax
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/taxId'
      requestBody:
        description: Tax data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tax'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          type: object
                          required:
                            - name
                            - rate
                            - isUse
                          properties:
                            id:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            name:
                              type: string
                              example: Some Food
                            rate:
                              type: number
                              multipleOf: 0.01
                              example: 10.25
                            isUse:
                              type: boolean
                              default: true
                            outletId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            deletedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
                            createdAt:
                              type: string
                              readOnly: true
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            updatedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing Tax
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/taxId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/discounts:
    get:
      summary: Get all discounts of an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Discount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new Discount for an outlet
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Discount data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Discount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/discounts/{discountId}:
    get:
      summary: Get Discount by Id
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/discountId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Discount'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing Discount
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/discountId'
      requestBody:
        description: Discount data
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Discount'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          type: object
                          required:
                            - name
                            - code
                            - type
                            - startedAt
                            - expiredAt
                          properties:
                            id:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            name:
                              type: string
                              example: Some Food
                            rate:
                              type: number
                              multipleOf: 0.01
                              example: 10.25
                            amount:
                              type: number
                              multipleOf: 0.01
                              example: 10.25
                            startedAt:
                              type: string
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            expiredAt:
                              type: string
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            outletId:
                              type: integer
                              format: int64
                              readOnly: true
                              example: 1
                            deletedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
                            createdAt:
                              type: string
                              readOnly: true
                              format: date-time
                              example: '2024-12-01T15:30:00Z'
                            updatedAt:
                              type: string
                              format: date-time
                              readOnly: true
                              nullable: true
                              default: null
                              example: '2024-12-01T15:30:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing Discount
      tags:
        - Outlet Resource
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/discountId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/orders:
    get:
      summary: Get all orders of an outlet
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Order'
                            - type: object
                              properties:
                                orderItems:
                                  type: array
                                  items:
                                    $ref: '#/components/schemas/OrderItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Add new Order for an outlet
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
      requestBody:
        description: Order and order items data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Order'
                - type: object
                  properties:
                    orderItems:
                      type: array
                      items:
                        $ref: '#/components/schemas/OrderItem'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Order'
                          - type: object
                            properties:
                              orderItems:
                                type: array
                                items:
                                  $ref: '#/components/schemas/OrderItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/orders/{orderId}:
    get:
      summary: Get Order by Id
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Order'
                          - type: object
                            properties:
                              orderItems:
                                type: array
                                items:
                                  $ref: '#/components/schemas/OrderItem'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Update existing Order
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/orderId'
      requestBody:
        description: Order and order items data
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/Order'
                - type: object
                  properties:
                    orderItems:
                      type: array
                      items:
                        $ref: '#/components/schemas/OrderItem'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          allOf:
                            - $ref: ../schemas/Response.yaml
                            - type: object
                              properties:
                                data:
                                  allOf:
                                    - $ref: ../schemas/Order.yaml
                                    - type: object
                                      properties:
                                        orderItems:
                                          type: array
                                          items:
                                            $ref: ../schemas/OrderItem.yaml
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Delete existing Order
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/orderId'
      responses:
        '200':
          $ref: '#/components/responses/Ok'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Checkout order transaction
      tags:
        - Transaction
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/outletId'
        - $ref: '#/components/parameters/orderId'
      requestBody:
        description: Transaction Data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Transaction'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Outlet not found
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/stocks:
    get:
      summary: Get current session user information
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid or expired access Token
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
  /outlets/{outletId}/stocks/{stockId}:
    get:
      summary: Get current session user information
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfull response
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '401':
          description: Invalid or expired access Token
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/Unexpected'
components:
  parameters:
    outletId:
      name: outletId
      in: path
      required: true
      description: The id of the outlet to retrieve
      schema:
        type: string
    employeeId:
      name: employeeId
      in: path
      required: true
      description: The id of the employee to retrieve
      schema:
        type: string
    categoryId:
      name: categoryId
      in: path
      required: true
      description: The id of the category to retrieve
      schema:
        type: string
    productId:
      name: productId
      in: path
      required: true
      description: The id of the product to retrieve
      schema:
        type: string
    taxId:
      name: taxId
      in: path
      required: true
      description: The id of the tax to retrieve
      schema:
        type: string
    discountId:
      name: discountId
      in: path
      required: true
      description: The id of the discount to retrieve
      schema:
        type: string
    orderId:
      name: orderId
      in: path
      required: true
      description: The id of the order to retrieve
      schema:
        type: string
  schemas:
    SignIn:
      type: object
      required:
        - emailOrPhoneNumber
        - password
      properties:
        emailOrPhoneNumber:
          type: string
          example: myemail@email.com
        password:
          type: string
          minLength: 6
          example: p4ssw0rd
    AdminAccount:
      type: object
      required:
        - fullName
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        fullName:
          type: string
          example: John Doe
        role:
          type: string
          readOnly: true
          enum:
            - super_admin
            - admin
          default: admin
        userId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Response:
      type: object
      properties:
        message:
          type: string
          default: OK
        code:
          type: integer
          format: int64
          default: 200
        success:
          type: boolean
          default: true
    PersonalAccount:
      type: object
      required:
        - fullName
        - dateOfBirth
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        fullName:
          type: string
          example: John Doe
        address:
          type: string
          nullable: true
        imagePath:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          format: date-time
        bankAccountNumber:
          type: string
          nullable: true
        bankName:
          type: string
          nullable: true
        userId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    BearerTokens:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    BusinessAccount:
      type: object
      required:
        - companyName
        - registrationNumber
        - companyEmail
        - companyPhone
        - ownerName
        - bankAccountNumber
        - bankName
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        companyName:
          type: string
          example: Company name co
        companyEmail:
          type: string
          example: some.company@email.com
        companyPhone:
          type: string
          example: '08123456789'
        ownerName:
          type: string
          example: John Doe
        registrationNumber:
          type: string
          example: '01234567891011'
        companyAddress:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
        bankAccountNumber:
          type: string
        bankName:
          type: string
        userId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    User:
      type: object
      required:
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        email:
          type: string
          example: some@email.com
        password:
          type: string
          writeOnly: true
          descrpition: Hashed password
        accountType:
          type: string
          readOnly: true
          enum:
            - personal
            - employee
            - business
            - partner
            - admin
          default: personal
        referralCode:
          type: string
          readOnly: true
          nullable: true
          default: null
        referredBy:
          type: string
          readOnly: true
          nullable: true
          default: null
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Outlet:
      type: object
      required:
        - outletName
        - outletAddress
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        outletName:
          type: string
          example: Some name
        outletAddress:
          type: string
          example: Some st 12, City, Province, Country.
        image:
          type: string
          example: http://somelink.com/path/filename.png
        userId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    EmployeeAccount:
      type: object
      required:
        - fullName
        - dateOfBirth
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        fullName:
          type: string
          example: John Doe
        address:
          type: string
          nullable: true
        imagePath:
          type: string
          nullable: true
        dateOfBirth:
          type: string
          format: date-time
        bankAccountNumber:
          type: string
          nullable: true
        bankName:
          type: string
          nullable: true
        userId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Category:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Food
        parentCategoryId:
          type: integer
          format: int64
          readOnly: true
          example: 1
          nullable: true
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Product:
      type: object
      required:
        - name
        - price
        - isAvailable
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Some Food
        price:
          type: number
          multipleOf: 0.01
          example: 10.25
        isAvailable:
          type: boolean
          default: true
        categoryId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        image:
          type: string
          example: http://somelink.com/path/filename.png
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Tax:
      type: object
      required:
        - name
        - rate
        - isUse
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Some Food
        rate:
          type: number
          multipleOf: 0.01
          example: 10.25
        isUse:
          type: boolean
          default: true
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Discount:
      type: object
      required:
        - name
        - code
        - type
        - startedAt
        - expiredAt
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Some Food
        rate:
          type: number
          multipleOf: 0.01
          example: 10.25
        amount:
          type: number
          multipleOf: 0.01
          example: 10.25
        startedAt:
          type: string
          format: date-time
          example: '2024-12-01T15:30:00Z'
        expiredAt:
          type: string
          format: date-time
          example: '2024-12-01T15:30:00Z'
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Order:
      type: object
      required:
        - orderNumber
        - customerName
        - orderSource
        - orderStatus
        - orderType
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        orderNumber:
          type: string
          example: ORDERNUMBER123
        orderSource:
          type: string
          enum:
            - confirmed
            - preparing
            - delivered
            - cancelled
        orderStatus:
          type: string
          enum:
            - cashier
            - qr_table
        orderType:
          type: string
          enum:
            - dine_in
            - takeaway
            - other
        customerName:
          type: string
          example: John Doe
        customerPhoneNumber:
          type: string
          example: 82123456789
          nullable: true
          default: null
        customerEmail:
          type: string
          example: example@email.com
          nullable: true
          default: null
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    OrderItem:
      type: object
      required:
        - productId
        - quantity
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        orderId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        productId:
          type: integer
          format: int64
          example: 1
        price:
          type: number
          multipleOf: 0.01
          readOnly: true
        quantity:
          type: integer
          format: int64
          example: 1
        subTotal:
          type: number
          multipleOf: 0.01
          readOnly: true
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Transaction:
      type: object
      required:
        - taxId
        - paymentStatus
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        taxId:
          type: integer
          format: int64
          example: 1
        taxRate:
          type: number
          multipleOf: 0.01
          readOnly: true
        discountId:
          type: integer
          format: int64
          example: 1
          nullable: true
          default: null
        discountRate:
          type: number
          multipleOf: 0.01
          example: 10.25
          nullable: true
          default: null
        discountAmount:
          type: number
          multipleOf: 0.01
          example: 10.25
          nullable: true
          default: null
        paymentStatus:
          type: string
          enum:
            - paid
            - unpaid
            - failed
            - refunded
        paymentTypeId:
          type: integer
          format: int64
          example: 1
          nullable: true
          default: null
        orderId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    PaymentType:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Some Method
        image:
          type: string
          example: http://somelink.com/path/filename.png
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
    Stock:
      type: object
      required:
        - name
        - unit
        - ammount
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
          example: 1
        name:
          type: string
          example: Some Goods
        unit:
          type: string
          example: Kg
        ammount:
          type: number
          multipleOf: 0.01
          example: 10.25
        price:
          type: number
          multipleOf: 0.01
          example: 10.25
          nullable: true
        outletId:
          type: integer
          format: int64
          readOnly: true
          example: 1
        deletedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
        createdAt:
          type: string
          readOnly: true
          format: date-time
          example: '2024-12-01T15:30:00Z'
        updatedAt:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          default: null
          example: '2024-12-01T15:30:00Z'
  responses:
    Unexpected:
      description: unexpected error
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  message:
                    default: Internal server error
                  code:
                    default: 500
                  success:
                    default: false
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  message:
                    default: Unauthorized
                  code:
                    default: 401
                  success:
                    default: false
    Forbidden:
      description: Forbidden content
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  message:
                    default: Access Forbidden
                  code:
                    default: 403
                  success:
                    default: false
    BadRequest:
      description: Bad request, invalid input
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  message:
                    default: Bad Request
                  code:
                    default: 400
                  success:
                    default: false
                  issues:
                    type: array
                    item:
                      type: any
    NotFound:
      description: Resource Not found
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  message:
                    default: Not found
                  code:
                    default: 404
                  success:
                    default: false
    Ok:
      description: successful response
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  message:
                    default: OK
                  code:
                    default: 200
                  success:
                    default: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
